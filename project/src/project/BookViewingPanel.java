/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project;

import java.text.ParseException;
import java.time.LocalDateTime;
import java.time.Month;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;

/**
 *
 * @author nicol
 */
public class BookViewingPanel extends javax.swing.JPanel {
    Property property;
    private int month=0;
    private int day=0;
    private int year=0;
    private int hour=0;
    final private LocalDateTime currentDate = LocalDateTime.now(); 
    /**
     * Creates new form BookViewingPanel
     */
    public BookViewingPanel(Property property) {
        this.property = property;
        initComponents();
        for (Month mymonth : Month.values()){
            monthCombo.addItem(mymonth.name());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        dayCombo = new javax.swing.JComboBox<>();
        monthCombo = new javax.swing.JComboBox<>();
        yearCombo = new javax.swing.JComboBox<>();
        hourCombo = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        confirmButton = new javax.swing.JButton();

        jLabel1.setText("Book a viewing:");

        dayCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Day", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        dayCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dayComboActionPerformed(evt);
            }
        });

        monthCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Month" }));
        monthCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthComboActionPerformed(evt);
            }
        });

        yearCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Year", "2021", "2022" }));
        yearCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yearComboActionPerformed(evt);
            }
        });

        hourCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hour of visit", "--------------" }));
        hourCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hourComboActionPerformed(evt);
            }
        });

        jLabel2.setText("NB : our viewings last around 45 minutes");

        confirmButton.setText("Confirm");
        confirmButton.setEnabled(false);
        confirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(hourCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(dayCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(monthCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(yearCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(confirmButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dayCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(monthCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yearCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hourCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(confirmButton))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void dayComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dayComboActionPerformed
        if (dayCombo.getSelectedIndex()!=0){
            day = Integer.parseInt((String) dayCombo.getSelectedItem());
            updateHours();
        }
    }//GEN-LAST:event_dayComboActionPerformed

    private void monthComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthComboActionPerformed
        if (monthCombo.getSelectedIndex()!=0){
            month = Month.valueOf((String) monthCombo.getSelectedItem()).getValue();

            //Month.APRIL.getValue();
            if (month==2||month==4 || month ==6 || month==9|| month ==11){
                dayCombo.removeItem("31");
                if (dayCombo.getItemCount()<31 ){ //if there's not 31 days avalaible
                    int initialNrOfDays =dayCombo.getItemCount();
                    int daystoadd = 30-dayCombo.getItemCount();
                    for (int i=1; i<=daystoadd; i++){
                        dayCombo.addItem(Integer.toString(initialNrOfDays+i));
                    }
                }
                if (month==2){
                    dayCombo.removeItem("30");
                    dayCombo.removeItem("29");
                }
            }
            else { //if it's a month with > than 30 days
                if (dayCombo.getItemCount()<32 ){ //if there's not 31 days avalaible
                    int initialNrOfDays =dayCombo.getItemCount();
                    int daystoadd = 31-dayCombo.getItemCount();
                    for (int i=1; i<=daystoadd; i++){
                        dayCombo.addItem(Integer.toString(initialNrOfDays+i));
                    }
                }
            }


            updateDaysAfterToday();
            updateHours();
        }
    }//GEN-LAST:event_monthComboActionPerformed

    private void updateDaysAfterToday(){
        confirmButton.setEnabled(false);
        if(year==currentDate.getYear()&& month==currentDate.getMonthValue()){
            for (int i=1;i<currentDate.getDayOfMonth();i++){
                dayCombo.removeItemAt(1);
            }
        }
        else {
            if (dayCombo.getItemCount()!=32){
                int currentItemNr = dayCombo.getItemCount();
                for (int i=1; i<currentItemNr;i++){
                    dayCombo.removeItemAt(1);
                }
                for(int i=1; i<32;i++){
                    dayCombo.addItem(Integer.toString(i));
                }
            }
        }
        confirmButton.setEnabled(false);
    }
    private void yearComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yearComboActionPerformed
        if (yearCombo.getSelectedIndex()!=0){
            year = Integer.parseInt((String) yearCombo.getSelectedItem());
            if(year==currentDate.getYear()){
                for (int i=1;i<currentDate.getMonthValue();i++){                
                    monthCombo.removeItemAt(1); //because it will always be the second item that we have to remove
                }
            }
            else if (year>currentDate.getYear()&& monthCombo.getItemCount()<13){
                int currentItemNr = monthCombo.getItemCount();
                for (int i=1;i<currentItemNr;i++){
                    //remove all except first item
                    monthCombo.removeItemAt(1);
                }
                for (Month mymonth : Month.values()){
                    monthCombo.addItem(mymonth.name());
                }
            }
            updateDaysAfterToday();
            updateHours();
        }
    }//GEN-LAST:event_yearComboActionPerformed

    private void hourComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hourComboActionPerformed
        String fullHour= (String)hourCombo.getSelectedItem();
        confirmButton.setEnabled(true);
        if (fullHour.charAt(1)=='h'){ //8h / 9h
            hour= Integer.parseInt(String.valueOf(fullHour.charAt(0)));
        }
        else if (fullHour.charAt(2)=='h'){
            String twoDigitsHour= String.valueOf(fullHour.charAt(0)) + String.valueOf(fullHour.charAt(1));
            hour = Integer.parseInt(twoDigitsHour);
        }
        else{
            confirmButton.setEnabled(false);
        }
        
    }//GEN-LAST:event_hourComboActionPerformed

    private void confirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmButtonActionPerformed
        if (hourCombo.getSelectedIndex()==0){
            confirmButton.setEnabled(false);
        }
        else{
            BDD.addViewing(MainWindow.getUser().getUserId(), property.propertyId,year,month,day,hour);
            String message = "Thank you for your reserving the viewing on the \n"+day+" "+monthCombo.getItemAt(month)+" "+year+", at "+hour+"h for \n"+property.title;
            JOptionPane.showMessageDialog(null, message);
            MainWindow.changePanel(new BrowsePropertiesPanel());
        }
    }//GEN-LAST:event_confirmButtonActionPerformed
    private void updateHours(){
        confirmButton.setEnabled(false);
        for (int i=hourCombo.getItemCount(); i>1; i--){
                hourCombo.removeItemAt(i-1);
        }
        if ((month != 0 && year != 0 && day != 0)){
            if ((year==currentDate.getYear()&& month==currentDate.getMonthValue())&& day == currentDate.getDayOfMonth()){
                // if you want to book for today yoou can't book for past hours
                if (currentDate.getHour()>8){
                    //if you are booking today and it's after 8, you can't book for past hours
                    for (int i=currentDate.getHour()+1; i<18;i++){
                        if (!BDD.isBooked(property.propertyId,year,month,day,i)){
                            hourCombo.addItem(i+"h -- "+(i+1)+"h");
                        }
                    }
                }
                else {
                    
                    // you are booking before 8AM so you can book when you want in this day
                    for (int i=8; i<18;i++){
                        if (!BDD.isBooked(property.propertyId,year,month,day,i)){
                            hourCombo.addItem(i+"h -- "+(i+1)+"h");
                        }
                    }
                }
            }
            else{
                //you are not booking today
                for (int i=8; i<18;i++){
                    if (!BDD.isBooked(property.propertyId,year,month,day,i)){
                        hourCombo.addItem(i+"h -- "+(i+1)+"h");
                    }
                }
            }
        }
        confirmButton.setEnabled(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton confirmButton;
    private javax.swing.JComboBox<String> dayCombo;
    private javax.swing.JComboBox<String> hourCombo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JComboBox<String> monthCombo;
    private javax.swing.JComboBox<String> yearCombo;
    // End of variables declaration//GEN-END:variables
}
